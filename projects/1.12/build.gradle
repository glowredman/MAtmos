buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			name 'forge'
			url 'https://files.minecraftforge.net/maven/'
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
		maven {
			name = 'sponge'
			url = 'https://repo.spongepowered.org/maven'
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:' + project.forgeGradleVersion
		classpath 'org.spongepowered:mixingradle:' + project.mixinGradleVersion
	}
}

configurations {
	embed
	compile.extendsFrom(embed)
}

repositories {
	maven {
		name = 'sponge'
		url = 'https://repo.spongepowered.org/maven'
	}
}

// forge: Forge + Mixin 0.8
// forge-mixin0.7: Forge + Mixin 0.7
// forge-nomixin: Forge + No mixin
// liteloader: LiteLoader + Mixin 0.8 (not really supported)

def target = project.hasProperty("target") ? project.target : "forge";

def mixinVersion = target == "forge-mixin0.7" ? "0.7.11-SNAPSHOT" : "0.8.3"
def embedMixin = !target.endsWith("-nomixin")

// Should the SoundSystemReplacer be included in Forge builds?
// (it's completely unnecessary, this option is only included for testing)
def forgeIncludeSoundSystemReplacer = false;


if(target.contains("liteloader") || forgeIncludeSoundSystemReplacer){
	dependencies {
		embed 'com.paulscode:soundsystem:201809301515'
	}
}

if(target.startsWith("forge")) {
	apply plugin: 'net.minecraftforge.gradle.forge'

	minecraft {
		version = "${project.mcVersion}-${project.forgeVersion}"
	}

	dependencies {
		if(embedMixin) {
			embed "org.spongepowered:mixin:${mixinVersion}"
		} else {
			compile "org.spongepowered:mixin:${mixinVersion}"
		}
	}

	sourceSets {
		commons.java.exclude 'eu/ha3/mc/haddon/litemod/**'

		main.java.exclude '**/LiteModMAtmos.java'

		main.resources.exclude '**/litemod.json'
	}
}

if(target.contains("liteloader")) {
	

	apply plugin: 'net.minecraftforge.gradle.liteloader'

	minecraft {
		version = "${project.mcVersion}"
	}

	sourceSets {
		commons.java.exclude 'eu/ha3/mc/haddon/forge/**'

		commons.resources.exclude '**/haddon_core.mixin.json'

		main.java.exclude '**/ForgeMatmos.java'
		main.java.exclude 'eu/ha3/matmos/core/preinit/forge/**'

		main.resources.exclude '**/mcmod.info'
		main.resources.exclude '**/pack.mcmeta'
	}
}

apply plugin: 'org.spongepowered.mixin'

dependencies {
	embed 'net.sf.practicalxml:practicalxml:1.1.19'
}

def buildVersion = new File("${projectDir}/../version.txt").getText('UTF-8').trim()
def ver = "${project.mcVersion}-${buildVersion}"

if(target.endsWith("-mixin0.7")){
	ver += "+mixin.0.7.11"
} else if(target.endsWith("-nomixin")){
	ver += "+nomixin"
}

version = ver
group = project.group
description = project.description
archivesBaseName = project.modid
ext.revision = "0"

minecraft {
	mappings = project.mcMappings
	runDir = 'run'
	replace '@MODID@', project.modid
	replace '@NAME@', project.modname
	replace '@AUTHOR@', project.author
	replace '@VERSION@', buildVersion
	replace '@DESCRIPTION@', project.description
}

// Overriding the sound system is unnecessary on 1.12.2 Forge,
// and doing so causes problems with Dynamic Surroundings.
if(forgeIncludeSoundSystemReplacer && target.startsWith("forge")){
	minecraft.coreMod = 'eu.ha3.matmos.core.preinit.forge.SoundSystemReplacerPlugin'
}


sourceCompatibility = 1.8
targetCompatibility = 1.8

def expensionPacks = [
	default: 'Matmos Default Resourcepack 1.10',
	air: 'MAtmos default 2012 pack Air',
	breeze: 'MAtmos default 2014 pack Breeze'
]

sourceSets {
	soundpacks {
		resources {
			srcDirs = ["${projectDir}/src/soundpacks/resources"]
		}
	}
	commons {
		java {
			srcDirs = ["${projectDir}/lib/MC-Commons/mc-src"]
		}
		resources {
			srcDirs = ["${projectDir}/lib/MC-Commons/mc-src/resources"]
		}

		ext.refMap = "haddon_core.mixin.refmap.json"

		compileClasspath += main.compileClasspath
	}
	main {
		java {
			srcDirs = ["${projectDir}/src/main/java", "${projectDir}/../common/src/common/java"]

		}
		resources {
			srcDirs = ["${projectDir}/src/main/resources"]
		}
		ext.refMap = "haddon.mixin.refmap.json"

		compileClasspath += commons.output
	}
	/*
	dev {
		compileClasspath += main.output
	}*/
}

reobf {
	jar {
		extraLines "PK: eu/ha3/easy eu/ha3/matmos/lib/eu/ha3/easy"
		extraLines "PK: eu/ha3/mc eu/ha3/matmos/lib/eu/ha3/mc"
		extraLines "PK: eu/ha3/util eu/ha3/matmos/lib/eu/ha3/util"
	}
}

jar {
	manifest {
		attributes (
			'FMLCorePluginContainsFMLMod': 'true',
			'FMLAT': "MAtmos_at.cfg",
			
			'TweakOrder': 0,
			'ForceLoadAsMod': 'true',
			'Implementation-Title': 'MAtmos'
		)
		if(target.startsWith("forge")){
			attributes (
				'MixinConfigs': 'haddon.mixin.json',
				'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker'
				// We must set the tweak class as MixinTweaker to be detected correctly
				// by the mixin environment.
			)
			if(forgeIncludeSoundSystemReplacer){
				attributes (
					'FMLCorePlugin': 'eu.ha3.matmos.core.preinit.forge.SoundSystemReplacerPlugin'
				)
			}
		}
		
		if(target.contains("liteloader")){
			attributes (
				'TweakClass': 'eu.ha3.matmos.core.preinit.SoundSystemReplacerTweaker'
			)
		}
	}

	from(sourceSets.commons.output);

	// embed libraries in jar
	// TODO shadow to avoid conflicts?
	from configurations.embed.collect {
		exclude '**/LICENSE.txt'
		it.isDirectory() ? it : zipTree(it)
	}
	
	if(target.contains("liteloader")){
		baseName = "mod-matmos" // fix liteloader name
	}
}

task allPacks { }

expensionPacks.each {k, v ->
	def pack = task "${k}"(type: Zip) {
		baseName v
		from(sourceSets.soundpacks) {
			include k
			include 'common'
		}
	}
	allPacks.dependsOn pack
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "name", project.modname
	inputs.property "description", project.description
	inputs.property "modid", project.modid
	inputs.property "mcversion", project.minecraft.version

	def props = [
			modid: project.modid,
			name: project.modname,
			description: project.description,
			version: ver,
			revision: project.buildRevision,
			mcversion: project.mcVersion,
			author: project.author,
			url: project.url
	]
	inputs.properties props
	
	if(target.contains('forge')) {
		// replace stuff in mcmod.info, nothing else
		from(sourceSets.main.resources.srcDirs) {
			include 'mcmod.info'

			// replace version and mcversion
			expand props
		}
	}

	
	if(target.contains('liteloader')) {
		// replace stuff in litemod.json, nothing else
		from(sourceSets.main.resources.srcDirs) {
			include 'litemod.json'

			// replace props
			expand props
		}
	}

	// copy everything else except the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude(['mcmod.info', 'litemod.json'])
	}
}

if(target.contains("liteloader")) {
	mixin {
		defaultObfuscationEnv notch
	}
}
