buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			name 'forge'
			url 'http://files.minecraftforge.net/maven/'
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:' + project.forgeGradleVersion
	}
}

configurations {
	embed
	compile.extendsFrom(embed)
}

repositories {
	maven {
		name = "chickenbones"
		url = "http://chickenbones.net/maven/"
	}
	maven { // this has to be here and not in buildscript.repositories, otherwise Gradle won't find mixin <0.8 for some reason
		name = 'sponge'
		url = 'https://repo.spongepowered.org/maven/'
	}
}

// forge: Forge + Mixin 0.7
// forge-nomixin: Forge + No mixin

def target = project.hasProperty("target") ? project.target : "forge";

def mixinVersion = "0.7.11-SNAPSHOT"
def embedMixin = !target.endsWith("-nomixin")

if(target.contains("forge")) {
	apply plugin: 'forge'

	minecraft {
		version = "${project.mcVersion}-${project.forgeVersion}"
	}

	dependencies {
		if(embedMixin) {
			embed "org.spongepowered:mixin:${mixinVersion}"
		} else {
			compile "org.spongepowered:mixin:${mixinVersion}"
		}
	}

	sourceSets {
		commons.java.exclude 'eu/ha3/mc/haddon/litemod/**'

		main.java.exclude '**/LiteModMAtmos.java'

		main.resources.exclude '**/litemod.json'
	}
}

dependencies {
	compile "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
	compile "codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev"
	
	embed 'net.sf.practicalxml:practicalxml:1.1.19'
	embed 'com.paulscode:soundsystem:201809301515'
}

def buildVersion = new File("${projectDir}/../version.txt").getText('UTF-8').trim()
def ver = "${project.mcVersion}-${buildVersion}"

if(target.endsWith("-nomixin")){
	ver += "+nomixin"
}

version = ver
group = project.group
description = project.description
archivesBaseName = project.modid
ext.revision = "0"

minecraft {
	runDir = 'run'
	replace '@MODID@', project.modid
	replace '@NAME@', project.modname
	replace '@AUTHOR@', project.author
	replace '@VERSION@', buildVersion
	replace '@DESCRIPTION@', project.description
	srgExtra "PK: eu/ha3/easy eu/ha3/matmos/lib/eu/ha3/easy"
	srgExtra "PK: eu/ha3/mc eu/ha3/matmos/lib/eu/ha3/mc"
	srgExtra "PK: eu/ha3/util eu/ha3/matmos/lib/eu/ha3/util"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

def expensionPacks = [
	default: 'Matmos Default Resourcepack 1.10',
	air: 'MAtmos default 2012 pack Air',
	breeze: 'MAtmos default 2014 pack Breeze'
]

sourceSets {
	soundpacks {
		resources {
			srcDirs = ["${projectDir}/src/soundpacks/resources"]
		}
	}
	commons {
		java {
			srcDirs = ["${projectDir}/lib/MC-Commons/mc-src"]
		}
		resources {
			srcDirs = []
		}

		compileClasspath += main.compileClasspath
	}
	main {
		java {
			srcDirs = ["${projectDir}/src/main/java", "${projectDir}/../common/src/common/java"]

		}
		resources {
			srcDirs = ["${projectDir}/src/main/resources", "${projectDir}/lib/MC-Commons/mc-src/resources"]
		}

		compileClasspath += commons.output
	}
	/*dev {
		compileClasspath += main.output
	}*/
}

def outRefMapMain = tasks.compileJava.temporaryDir.toString() + "/haddon.mixin.refmap.json" // 1.7.10 mixin compatibility

jar {
	manifest {
		attributes (
			'FMLCorePluginContainsFMLMod': 'true',
			'FMLAT': "haddon_core_at.cfg MAtmos_at.cfg",
			
			'TweakOrder': 0,
			'ForceLoadAsMod': 'true',
			'Implementation-Title': 'MAtmos'
		)
		if(target.contains("forge")){
			attributes (
				'MixinConfigs': 'haddon.mixin.json',
				'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
				'FMLCorePlugin': 'eu.ha3.matmos.core.preinit.forge.SoundSystemReplacerPlugin'
				// We must set the tweak class as MixinTweaker to be detected correctly
				// by the mixin environment.
			)
		}
	}

	from(sourceSets.commons.output);

	from outRefMapMain; // 1.7.10 mixin
	
	// embed libraries in jar
	// TODO shadow to avoid conflicts?
	from configurations.embed.collect {
		exclude '**/LICENSE.txt'
		it.isDirectory() ? it : zipTree(it)
	}
}

// 1.7.10 mixin compatibility
def outSrgFile = tasks.compileJava.temporaryDir.toString() + "/outSrg.srg"

afterEvaluate {
	tasks.compileJava.options.compilerArgs += ["-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=${outSrgFile}", "-AoutRefMapFile=${outRefMapMain}"];
}

reobf {
	addExtraSrgFile outSrgFile
}
// end of mixin stuff

task allPacks { }

expensionPacks.each {k, v ->
	def pack = task "${k}"(type: Zip) {
		baseName v
		from(sourceSets.soundpacks) {
			include k
			include 'common'
		}
	}
	allPacks.dependsOn pack
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "name", project.modname
	inputs.property "description", project.description
	inputs.property "modid", project.modid
	inputs.property "mcversion", project.minecraft.version

	def props = [
			modid: project.modid,
			name: project.modname,
			description: project.description,
			version: ver,
			revision: project.buildRevision,
			mcversion: project.mcVersion,
			author: project.author,
			url: project.url
	]
	inputs.properties props
	
	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand props
	}

	// replace stuff in litemod.json, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'litemod.json'

		// replace props
		expand props
	}

	// copy everything else except the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude(['mcmod.info', 'litemod.json'])
	}
}